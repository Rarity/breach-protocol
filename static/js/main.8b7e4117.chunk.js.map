{"version":3,"sources":["components/_shared/Cell.jsx","components/_shared/Grid.jsx","components/_shared/ErrorBoundary.jsx","model/game.js","components/Matrix/Matrix.jsx","components/Buffer/Buffer.jsx","components/Sequences/Sequences.jsx","components/Game/Game.jsx","model/buffer/buffer.js","App.js","reportWebVitals.js","index.js"],"names":["StyledCell","styled","span","props","color","backgroundColor","observer","children","disabled","selected","completed","onClick","getColor","useCallback","getBackgroundColor","isDisabled","Grid","div","direction","wrap","justify","align","spacing","propTypes","PropTypes","string","number","defaultProps","ErrorBoundary","state","hasError","error","errorInfo","console","log","this","Component","states","Object","freeze","created","started","finished","selectionModes","row","column","Game","buffer","sequences","matrix","isEmpty","Error","length","selectedIndex","history","makeAutoObservable","x","y","includes","selectionMode","value","addEntry","push","isFull","position","StyledTable","StyledThead","onCellClick","handleCellClick","colSpan","map","line","symbol","GameSelectionModes","shortid","generate","StyledAside","aside","size","capacity","values","toJS","Array","_","i","Sequences","sequence","game","select","Buffer","join","GameWrapper","main","App","GameModel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mqBAIA,IAAMA,EAAaC,IAAOC,KAAV,KAQL,SAACC,GAAD,OAAWA,EAAMC,SACN,SAACD,GAAD,OAAWA,EAAME,mBAsDxBC,eAzCF,SAAC,GAOP,IANLC,EAMI,EANJA,SACAC,EAKI,EALJA,SACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,UACAC,EAEI,EAFJA,QACGR,EACC,wEACES,EAAWC,uBAAY,WAC3B,OAAIL,EACK,6BAGF,yBACN,CAACA,IAEEM,EAAqBD,uBAAY,WACrC,OAAIL,EACK,wBACEE,EACF,sBACED,EACF,sBAGF,YACN,CAACD,EAAUE,EAAWD,IAEzB,OACE,cAACT,EAAD,yBACEI,MAAOQ,EACPP,gBAAiBS,EACjBC,WAAYP,GACRL,GAJN,IAKEQ,QAASH,EAAW,KAAOG,EAL7B,SAOGJ,Q,8PC3DP,IAAMS,EAAOf,IAAOgB,IAAV,KAEU,SAACd,GAAD,OAAWA,EAAMe,aACtB,SAACf,GAAD,OAAWA,EAAMgB,QACX,SAAChB,GAAD,OAAWA,EAAMiB,WACrB,SAACjB,GAAD,OAAWA,EAAMkB,SAGb,SAAClB,GAAD,gBAAcA,EAAMmB,QAApB,UAIrBN,EAAKO,UAAY,CACfL,UAAWM,IAAUC,OACrBN,KAAMK,IAAUC,OAChBL,QAASI,IAAUC,OACnBJ,MAAOG,IAAUC,OACjBH,QAASE,IAAUE,QAGrBV,EAAKW,aAAe,CAClBT,UAAW,MACXC,KAAM,SACNC,QAAS,aACTC,MAAO,aACPC,QAAS,GAGIN,Q,8BCJAY,E,kDAzBb,WAAYzB,GAAQ,IAAD,8BACjB,cAAMA,IACD0B,MAAQ,CAAEC,UAAU,GAFR,E,8DAWDC,EAAOC,GACvBC,QAAQC,IAAI,uBAAwBH,EAAOC,K,+BAI3C,OAAIG,KAAKN,MAAMC,SAEN,uDAGFK,KAAKhC,MAAMI,Y,gDAhBYwB,GAG9B,OAFAE,QAAQC,IAAI,UAAWH,GAEhB,CAAED,UAAU,O,GATKM,a,OCCtBC,EAASC,OAAOC,OAAO,CAC3BC,QAAS,UACTC,QAAS,UACTC,SAAU,aAGNC,EAAiBL,OAAOC,OAAO,CACnCK,IAAK,MACLC,OAAQ,WAkEKC,E,WA9Db,WAAYC,EAAQC,EAAWC,GAC7B,GADsC,qBACjCF,EAAOG,UACV,MAAMC,MAAM,wBAKd,GAFAhB,KAAKY,OAASA,EAEW,IAArBC,EAAUI,OACZ,MAAMD,MAAM,0CAEdhB,KAAKa,UAAYA,EAEjBb,KAAKc,OAASA,EACdd,KAAKkB,cAAgB,EACrBlB,KAAKmB,QAAU,GAEfC,YAAmBpB,M,qDAiBnBA,KAAKN,MAAQQ,EAAOG,U,6BAGfgB,EAAGC,GACR,GAAItB,KAAKmB,QAAQI,SAAb,UAAyBF,EAAzB,YAA8BC,IAChC,MAAMN,MAAM,yCAGd,GAAIhB,KAAKwB,gBAAkBhB,EAAeC,KAAOY,IAAMrB,KAAKkB,cAC1D,MAAMF,MAAM,wBAAD,OAAyBhB,KAAKkB,gBAG3C,GACElB,KAAKwB,gBAAkBhB,EAAeE,QACtCY,IAAMtB,KAAKkB,cAEX,MAAMF,MAAM,2BAAD,OAA4BhB,KAAKkB,gBAG9C,IAAMO,EAAQzB,KAAKc,OAAOO,GAAGC,GAM7B,OAJAtB,KAAKkB,cAAgBlB,KAAKwB,gBAAkBhB,EAAeC,IAAMa,EAAID,EACrErB,KAAKY,OAAOc,SAASD,GACrBzB,KAAKmB,QAAQQ,KAAb,UAAqBN,EAArB,YAA0BC,IAEnBG,I,4BAtCP,OAAIzB,KAAKY,OAAOgB,SACP1B,EAAOK,SAETP,KAAKN,Q,oCAIZ,OAAOM,KAAKY,OAAOiB,SAAW,IAAM,EAChCrB,EAAeC,IACfD,EAAeE,W,0PCnCvB,IAAMoB,EAAchE,IAAOgB,IAAV,KAIXiD,EAAcjE,IAAOgB,IAAV,KAiDFX,eAxCA,SAAC,GAMT,IALL2C,EAKI,EALJA,OACAI,EAII,EAJJA,cACAM,EAGI,EAHJA,cACAQ,EAEI,EAFJA,YACAb,EACI,EADJA,QAEMc,EAAkBvD,uBACtB,SAAC2C,EAAGC,GAAJ,OAAU,WACRU,EAAYX,EAAGC,MAEjB,CAACU,IAGH,OACE,eAACF,EAAD,WACE,cAACC,EAAD,CAAaG,QAASpB,EAAOG,OAA7B,yBACCH,EAAOqB,KAAI,SAACC,EAAMf,GAAP,OACV,8BACGe,EAAKD,KAAI,SAACE,EAAQf,GAAT,OACR,cAAC,EAAD,CAEE9C,QAASyD,EAAgBZ,EAAGC,GAC5BjD,SAAU8C,EAAQI,SAAR,UAAoBF,EAApB,YAAyBC,IACnChD,SACGkD,IAAkBc,EAAmB7B,KACpCS,IAAkBG,GACnBG,IAAkBc,EAAmB5B,QACpCQ,IAAkBI,EARxB,SAWGe,GAVIE,IAAQC,gBAHTD,IAAQC,qB,kKClC1B,IAAMC,EAAc3E,IAAO4E,MAAV,KAEF,SAAC1E,GAAD,4BAA0BA,EAAM2E,KAAhC,QAuBAxE,eAdA,SAAC,GAA0B,IAAxByE,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,OAG1B,OAFA/C,QAAQC,IAAI,YAAa+C,YAAKD,IAG5B,cAACJ,EAAD,CAAaE,KAAMC,EAAnB,SACG,YAAIG,MAAMH,IAAWT,KAAI,SAACa,EAAGC,GAC5B,OAAIA,GAAKJ,EAAO5B,OAAe,KAExB,cAAC,EAAD,UAAe4B,EAAOI,IAAM,MAAjBA,WCXXC,EAVG,SAAC,GAAmB,IAAjBrC,EAAgB,EAAhBA,UACnB,OACE,cAAC,EAAD,CAAM9B,UAAU,SAAhB,SACG8B,EAAUsB,KAAI,SAACgB,GAAD,OACb,cAAC,EAAD,CAAQP,SAAUO,EAASlC,OAAQ4B,OAAQM,UCoBpChF,eArBF,SAAC,GAAc,IAAZiF,EAAW,EAAXA,KAId,OACE,eAAC,EAAD,WACE,cAAC,EAAD,CACEtC,OAAQsC,EAAKtC,OACbI,cAAekC,EAAKlC,cACpBM,cAAe4B,EAAK5B,cACpBL,QAASiC,EAAKjC,QACda,YAVc,SAACX,EAAGC,GACtB8B,EAAKC,OAAOhC,EAAGC,MAWb,eAAC,EAAD,CAAMvC,UAAU,SAASI,QAAS,EAAlC,UACE,cAAC,EAAD,eAAYiE,EAAKxC,SACjB,cAAC,EAAD,CAAWC,UAAWuC,EAAKvC,qBCcpByC,E,WAhCb,WAAYV,GAAW,oBACrB5C,KAAK4C,SAAWA,EAChB5C,KAAK6C,OAAS,GAEdzB,YAAmBpB,M,sDAQnB,OAA8B,IAAvBA,KAAK6C,OAAO5B,S,+BAInB,OAAOjB,KAAK6C,OAAO5B,SAAWjB,KAAK4C,W,+BAG5BnB,GACP,GAAIzB,KAAK4B,SACP,MAAMZ,MAAM,kBAGdhB,KAAK6C,OAAOlB,KAAKF,K,uCAGF0B,GACf,OAAOnD,KAAK6C,OAAOU,KAAK,IAAIhC,SAAS4B,EAASI,KAAK,O,+BApBnD,OAAOvD,KAAK6C,OAAO5B,W,wJCLvB,IAAMuC,EAAc1F,IAAO2F,KAAV,KA+BFC,MAzBf,WACE,IAAM9C,EAAS,IAAI0C,EAAO,GAapBF,EAAO,IAAIO,EAAU/C,EAZT,CAChB,CAAC,KAAM,MACP,CAAC,KAAM,KAAM,MACb,CAAC,KAAM,KAAM,OAEA,CACb,CAAC,KAAM,KAAM,KAAM,KAAM,MACzB,CAAC,KAAM,KAAM,KAAM,KAAM,MACzB,CAAC,KAAM,KAAM,KAAM,KAAM,MACzB,CAAC,KAAM,KAAM,KAAM,KAAM,MACzB,CAAC,KAAM,KAAM,KAAM,KAAM,QAI3B,OACE,cAAC,EAAD,UACE,cAAC4C,EAAD,UACE,cAAC,EAAD,CAAMJ,KAAMA,SCnBLQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8b7e4117.chunk.js","sourcesContent":["import { useCallback } from 'react';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\n\nconst StyledCell = styled.span`\n  position: relative;\n  display: inline-block;\n  width: 60px;\n  padding: 2px;\n  text-transform: uppercase;\n  text-align: center;\n  font-size: 4rem;\n  color: ${(props) => props.color};\n  background-color: ${(props) => props.backgroundColor};\n\n  &:hover&:after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border: 1px dashed var(--primary-color-dark);\n  }\n`;\n\nconst Cell = ({\n  children,\n  disabled,\n  selected,\n  completed,\n  onClick,\n  ...props\n}) => {\n  const getColor = useCallback(() => {\n    if (disabled) {\n      return 'var(--disabled-color-dark)';\n    }\n\n    return 'var(--primary-color)';\n  }, [disabled]);\n\n  const getBackgroundColor = useCallback(() => {\n    if (disabled) {\n      return 'var(--disabled-color)';\n    } else if (completed) {\n      return 'var(--sucess-color)';\n    } else if (selected) {\n      return 'var(--active-color)';\n    }\n\n    return 'initial';\n  }, [disabled, completed, selected]);\n\n  return (\n    <StyledCell\n      color={getColor}\n      backgroundColor={getBackgroundColor}\n      isDisabled={disabled}\n      {...props}\n      onClick={disabled ? null : onClick}\n    >\n      {children}\n    </StyledCell>\n  );\n};\n\nexport default observer(Cell);\n","import styled from 'styled-components';\nimport PropTypes from 'prop-types';\n\nconst Grid = styled.div`\n  display: flex;\n  flex-direction: ${(props) => props.direction};\n  flex-wrap: ${(props) => props.wrap};\n  justify-content: ${(props) => props.justify};\n  align-items: ${(props) => props.align};\n\n  & > *:not(:last-child) {\n    margin-bottom: ${(props) => `${props.spacing}rem`};\n  }\n`;\n\nGrid.propTypes = {\n  direction: PropTypes.string,\n  wrap: PropTypes.string,\n  justify: PropTypes.string,\n  align: PropTypes.string,\n  spacing: PropTypes.number,\n};\n\nGrid.defaultProps = {\n  direction: 'row',\n  wrap: 'nowrap',\n  justify: 'flex-start',\n  align: 'flex-start',\n  spacing: 0,\n};\n\nexport default Grid;\n","import { Component } from 'react';\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    console.log('error :', error);\n    // Update state so the next render will show the fallback UI.\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.log('componentDidCatch : ', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      // You can render any custom fallback UI\n      return <h1>Something went wrong.</h1>;\n    }\n\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import { makeAutoObservable } from 'mobx';\n\nconst states = Object.freeze({\n  created: 'CREATED',\n  started: 'STARTED',\n  finished: 'FINISHED',\n});\n\nconst selectionModes = Object.freeze({\n  row: 'ROW',\n  column: 'COLUMN',\n});\n\nclass Game {\n  constructor(buffer, sequences, matrix) {\n    if (!buffer.isEmpty()) {\n      throw Error('Buffer must be empty');\n    }\n\n    this.buffer = buffer;\n\n    if (sequences.length === 0) {\n      throw Error('At least one sequence must be provided');\n    }\n    this.sequences = sequences;\n\n    this.matrix = matrix;\n    this.selectedIndex = 0;\n    this.history = [];\n\n    makeAutoObservable(this);\n  }\n\n  get state() {\n    if (this.buffer.isFull()) {\n      return states.finished;\n    }\n    return this.state;\n  }\n\n  get selectionMode() {\n    return this.buffer.position % 2 === 0\n      ? selectionModes.row\n      : selectionModes.column;\n  }\n\n  create() {\n    this.state = states.created;\n  }\n\n  select(x, y) {\n    if (this.history.includes(`${x}:${y}`)) {\n      throw Error('Cannot select an already visited cell');\n    }\n\n    if (this.selectionMode === selectionModes.row && x !== this.selectedIndex) {\n      throw Error(`Selected row must be ${this.selectedIndex}`);\n    }\n\n    if (\n      this.selectionMode === selectionModes.column &&\n      y !== this.selectedIndex\n    ) {\n      throw Error(`Selected column must be ${this.selectedIndex}`);\n    }\n\n    const value = this.matrix[x][y];\n\n    this.selectedIndex = this.selectionMode === selectionModes.row ? y : x;\n    this.buffer.addEntry(value);\n    this.history.push(`${x}:${y}`);\n\n    return value;\n  }\n}\n\nexport default Game;\n\nexport { states as GameStates, selectionModes as GameSelectionModes };\n","import { useCallback } from 'react';\nimport { observer } from 'mobx-react';\nimport shortid from 'shortid';\nimport styled from 'styled-components';\n\nimport { GameSelectionModes } from 'model/game';\nimport Cell from '../_shared/Cell';\n\nconst StyledTable = styled.div`\n  border: 1px solid var(--primary-color);\n`;\n\nconst StyledThead = styled.div`\n  background-color: var(--primary-color);\n`;\n\n/**\n *\n * @param {Object} props\n * @param {string[][]} props.matrix\n */\nconst Matrix = ({\n  matrix,\n  selectedIndex,\n  selectionMode,\n  onCellClick,\n  history,\n}) => {\n  const handleCellClick = useCallback(\n    (x, y) => () => {\n      onCellClick(x, y);\n    },\n    [onCellClick]\n  );\n\n  return (\n    <StyledTable>\n      <StyledThead colSpan={matrix.length}>CODE MATRIX</StyledThead>\n      {matrix.map((line, x) => (\n        <div key={shortid.generate()}>\n          {line.map((symbol, y) => (\n            <Cell\n              key={shortid.generate()}\n              onClick={handleCellClick(x, y)}\n              disabled={history.includes(`${x}:${y}`)}\n              selected={\n                (selectionMode === GameSelectionModes.row &&\n                  selectedIndex === x) ||\n                (selectionMode === GameSelectionModes.column &&\n                  selectedIndex === y)\n              }\n            >\n              {symbol}\n            </Cell>\n          ))}\n        </div>\n      ))}\n    </StyledTable>\n  );\n};\n\nexport default observer(Matrix);\n","import { toJS } from 'mobx';\nimport { observer } from 'mobx-react';\nimport styled from 'styled-components';\nimport { Cell } from '../_shared';\n\nconst StyledAside = styled.aside`\n  min-height: 52px;\n  min-width: ${(props) => `calc(60px * ${props.size})`};\n  border: 1px solid var(--primary-color);\n`;\n\n/**\n *\n * @param {Object} props\n * @param {number} props.capacity\n */\nconst Buffer = ({ capacity, values }) => {\n  console.log('Buffer ; ', toJS(values));\n\n  return (\n    <StyledAside size={capacity}>\n      {[...Array(capacity)].map((_, i) => {\n        if (i >= values.length) return null;\n\n        return <Cell key={i}>{values[i] || null}</Cell>;\n      })}\n    </StyledAside>\n  );\n};\n\nexport default observer(Buffer);\n","import Buffer from '../Buffer/Buffer';\nimport { Grid } from 'components/_shared';\n\nconst Sequences = ({ sequences }) => {\n  return (\n    <Grid direction='column'>\n      {sequences.map((sequence) => (\n        <Buffer capacity={sequence.length} values={sequence} />\n      ))}\n    </Grid>\n  );\n};\n\nexport default Sequences;\n","import { observer } from 'mobx-react';\nimport Matrix from '../Matrix/Matrix';\nimport Buffer from '../Buffer/Buffer';\nimport Sequences from '../Sequences/Sequences';\nimport { Grid } from 'components/_shared';\n\nconst Game = ({ game }) => {\n  const onCellClick = (x, y) => {\n    game.select(x, y);\n  };\n  return (\n    <Grid>\n      <Matrix\n        matrix={game.matrix}\n        selectedIndex={game.selectedIndex}\n        selectionMode={game.selectionMode}\n        history={game.history}\n        onCellClick={onCellClick}\n      />\n      <Grid direction='column' spacing={1}>\n        <Buffer {...game.buffer} />\n        <Sequences sequences={game.sequences} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default observer(Game);\n","import { makeAutoObservable } from 'mobx';\n\nclass Buffer {\n  constructor(capacity) {\n    this.capacity = capacity;\n    this.values = [];\n\n    makeAutoObservable(this);\n  }\n\n  get position() {\n    return this.values.length;\n  }\n\n  isEmpty() {\n    return this.values.length === 0;\n  }\n\n  isFull() {\n    return this.values.length === this.capacity;\n  }\n\n  addEntry(value) {\n    if (this.isFull()) {\n      throw Error('Buffer is full');\n    }\n\n    this.values.push(value);\n  }\n\n  containsSequence(sequence) {\n    return this.values.join('').includes(sequence.join(''));\n  }\n}\n\nexport default Buffer;\n","import styled from 'styled-components';\nimport { ErrorBoundary } from 'components/_shared';\nimport { default as GameModel } from './model/game';\nimport Game from './components/Game/Game';\nimport Buffer from './model/buffer/buffer';\n\nconst GameWrapper = styled.main`\n  border: 1px solid var(--primary-color);\n  height: 100%;\n  padding: 4%;\n`;\n\nfunction App() {\n  const buffer = new Buffer(8);\n  const sequences = [\n    ['55', '1C'],\n    ['1C', '1C', 'E9'],\n    ['BD', 'E9', '55'],\n  ];\n  const matrix = [\n    ['1C', 'E9', '1C', '55', '1C'],\n    ['E9', '55', '1C', '1C', 'BD'],\n    ['55', 'BD', '1C', 'BD', '55'],\n    ['55', '1C', '55', '55', '1C'],\n    ['E9', '1C', '1C', '1C', '55'],\n  ];\n  const game = new GameModel(buffer, sequences, matrix);\n\n  return (\n    <ErrorBoundary>\n      <GameWrapper>\n        <Game game={game} />\n      </GameWrapper>\n    </ErrorBoundary>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}